name: Cut release

on:
  workflow_dispatch:

jobs:
  cut_release:
    name: Cut a release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: ['11', '17']
    steps:
      - name: Setup dependencies
        run: |
          sudo apt update --fix-missing
          sudo apt-get install -y libxml2-utils python3
          pip3 install lxml beautifulsoup4

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v5
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.java-version }}

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # See: https://stackoverflow.com/a/57969570
      - name: Setup previous release version environment variable
        env:
          GH_TOKEN: ${{ github.token }}
        run: echo "PREVIOUS_RELEASE_VERSION=$(gh release list --exclude-drafts --exclude-pre-releases -L 1 | sed 's/.*\s\+Latest\s\+v\(.*\)\s\+.*/\1/g')" >> $GITHUB_ENV
      - name: Setup previous release version tag environment variable
        run: echo "PREVIOUS_RELEASE_TAG=v$PREVIOUS_RELEASE_VERSION" >> $GITHUB_ENV
      - name: Setup new release version environment variable
        run: |
          NEW_RELEASE_VERSION=$((echo $PREVIOUS_RELEASE_VERSION | grep "$(date +'%Y.%-U')" || date +'%Y.%-U.0') | python3 -c 'version = input().split("."); print(f"{version[0]}.{version[1]}.{int(version[2]) + 1}")')
          echo "NEW_RELEASE_VERSION=$NEW_RELEASE_VERSION" >> $GITHUB_ENV
      - name: Create branch locally on the runner
        if: ${{ matrix.java-version == '17' }}
        run: git checkout -b release_${NEW_RELEASE_VERSION} origin/master
      - name: Bump the versions in the branch
        if: ${{ matrix.java-version == '17' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          python3 tools/bump_versions/bump_sdk_version.py
          python3 tools/bump_versions/bump_connectors_version.py
      - name: Setup workflow git committer user
        if: ${{ matrix.java-version == '17' }}
        run: |
          git config --global user.name "athena_federation_cut_release_workflow"
          git config --global user.email "athena_federation_cut_release_workflow@users.noreply.github.com"
      - name: Create the release bump commit
        if: ${{ matrix.java-version == '17' }}
        run: |
          echo "Cut release $NEW_RELEASE_VERSION" > /tmp/RELEASE_MESSAGE
          echo >> /tmp/RELEASE_MESSAGE
          git fetch --tag origin
          git log --format='  - %s' $PREVIOUS_RELEASE_TAG..HEAD >> /tmp/RELEASE_MESSAGE
          git commit -a -F /tmp/RELEASE_MESSAGE
      - name: Push the release branch (initial)
        if: ${{ matrix.java-version == '17' }}
        run: |
          git push origin --delete release_${NEW_RELEASE_VERSION} 2>/dev/null || echo "Branch doesn't exist, continuing..."
          git push origin release_${NEW_RELEASE_VERSION}:release_${NEW_RELEASE_VERSION}
      - name: Wait and checkout release branch (Java 11)
        if: ${{ matrix.java-version == '11' }}
        run: |
          for i in {1..30}; do
            if git ls-remote --heads origin release_${NEW_RELEASE_VERSION} | grep -q release_${NEW_RELEASE_VERSION}; then
              echo "Release branch found, checking out..."
              git fetch origin
              git checkout release_${NEW_RELEASE_VERSION}
              break
            else
              echo "Waiting for release branch to be created... ($i/30)"
              sleep 10
            fi
          done
      - name: Build Java ${{ matrix.java-version }} jars
        run: |
          mvn clean package -T 1C -DskipTests -Dorg.slf4j.simpleLogger.defaultLogLevel=WARN --no-transfer-progress
          mkdir -p /tmp/java${{ matrix.java-version }}_sdk_jars/
          cp ./athena-federation-sdk/target/aws-athena-federation-sdk-${NEW_RELEASE_VERSION}.jar /tmp/java${{ matrix.java-version }}_sdk_jars/
          cp ./athena-federation-sdk/target/aws-athena-federation-sdk-${NEW_RELEASE_VERSION}-withdep.jar /tmp/java${{ matrix.java-version }}_sdk_jars/
          mkdir -p /tmp/java${{ matrix.java-version }}_connector_jars/
          find athena-*/target -name "*.jar" -type f | grep -v "test" | grep -v "arrow" | grep -v "/original" | grep -v "example" | grep -v "\-sdk-" | grep -v "\-dsv2/" | grep -v "athena-jdbc" | xargs -I{} cp {} /tmp/java${{ matrix.java-version }}_connector_jars/
          mkdir -p /tmp/java${{ matrix.java-version }}_connector_zips/
          find athena-*/target/ -name "*.zip" -type f | grep -v "test" | grep -v "arrow" | grep -v "/original" | grep -v "example" | grep -v "\-sdk-" | grep -v "\-dsv2/" | xargs -I{} cp {} /tmp/java${{ matrix.java-version }}_connector_zips/
      - name: Upload Java ${{ matrix.java-version }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: java${{ matrix.java-version }}-artifacts
          path: |
            /tmp/java${{ matrix.java-version }}_sdk_jars/
            /tmp/java${{ matrix.java-version }}_connector_jars/
            /tmp/java${{ matrix.java-version }}_connector_zips/
      # --- NEW STEP to wait for Java 11 artifacts before download ---
      - name: Wait for Java 11 artifacts
        if: ${{ matrix.java-version == '17' }}
        run: |
          for i in {1..30}; do
            if gh api repos/${{ github.repository }}/actions/artifacts --paginate --jq '.artifacts[].name' | grep -q "java11-artifacts"; then
              echo "Java 11 artifacts found!"
              break
            else
              echo "Waiting for Java 11 artifacts... ($i/30)"
              sleep 10
            fi
          done
      - name: Download all Java artifacts
        if: ${{ matrix.java-version == '17' }}
        uses: actions/download-artifact@v4
        with:
          path: /tmp/artifacts
      - name: Debug downloaded artifacts
        if: ${{ matrix.java-version == '17' }}
        run: |
          echo "=== Downloaded artifacts structure ==="
          find /tmp/artifacts -type f | head -20
          echo "=== Directories ==="
          find /tmp/artifacts -type d
      - name: Reorganize downloaded artifacts
        if: ${{ matrix.java-version == '17' }}
        run: |
          mkdir -p /tmp/java11_sdk_jars /tmp/java11_connector_jars /tmp/java11_connector_zips
          mkdir -p /tmp/java17_sdk_jars /tmp/java17_connector_jars /tmp/java17_connector_zips
          echo "=== Reorganizing Java 11 artifacts ==="
          if [ -d "/tmp/artifacts/java11-artifacts" ]; then
            find /tmp/artifacts/java11-artifacts -type f -name "aws-athena-federation-sdk-*.jar" -exec cp {} /tmp/java11_sdk_jars/ \; 2>/dev/null || true
            find /tmp/artifacts/java11-artifacts -type f -name "*.jar" ! -name "aws-athena-federation-sdk-*.jar" -exec cp {} /tmp/java11_connector_jars/ \; 2>/dev/null || true
            find /tmp/artifacts/java11-artifacts -type f -name "*.zip" -exec cp {} /tmp/java11_connector_zips/ \; 2>/dev/null || true
          fi
          echo "=== Reorganizing Java 17 artifacts ==="
          if [ -d "/tmp/artifacts/java17-artifacts" ]; then
            find /tmp/artifacts/java17-artifacts -type f -name "aws-athena-federation-sdk-*.jar" -exec cp {} /tmp/java17_sdk_jars/ \; 2>/dev/null || true
            find /tmp/artifacts/java17-artifacts -type f -name "*.jar" ! -name "aws-athena-federation-sdk-*.jar" -exec cp {} /tmp/java17_connector_jars/ \; 2>/dev/null || true
            find /tmp/artifacts/java17-artifacts -type f -name "*.zip" -exec cp {} /tmp/java17_connector_zips/ \; 2>/dev/null || true
          fi
      # --- EXTRA FETCH STEP before release creation ---
      - name: Ensure release branch exists locally
        if: ${{ matrix.java-version == '17' }}
        run: |
          git fetch origin release_${NEW_RELEASE_VERSION}
          git checkout release_${NEW_RELEASE_VERSION}
      - name: Create the release on github
        if: ${{ matrix.java-version == '17' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          cat <<EOF > /tmp/RELEASE_NOTES
          This version includes improvements and bugfixes in some connectors. See [here](https://github.com/awslabs/aws-athena-query-federation/compare/v$PREVIOUS_RELEASE_VERSION..v$NEW_RELEASE_VERSION) for changes since the last release.
          
          Binary distribution of the SDK can be found here. For pre-built versions of the connector and UDF suite please:
          
          1. Navigate to Serverless Application Repository and search for "athena-federation".  Also check the checkbox labeled "Show apps that create custom IAM roles or resource policies".
          
          2. Look for entries published by the "Amazon Athena Federation" author.
          
          You can assert the validity of the binary distribution by comparing against the below cksums.
          
          EOF

          # Generate checksum tables for both Java versions and all artifact types
          for java_version in 11 17; do
            for artifact_type in "sdk_jars:Athena Federation SDK jars" "connector_jars:Athena Federation Connector Lambda jars" "connector_zips:Athena Federation Connector Lambda zips"; do
              dir_suffix=$(echo $artifact_type | cut -d: -f1)
              display_name=$(echo $artifact_type | cut -d: -f2)
          
              cat <<EOF >> /tmp/RELEASE_NOTES
          ${display_name} (Java ${java_version})
          |CheckSum|File|
          |----------|----|
          $(cd /tmp/java${java_version}_${dir_suffix} 2>/dev/null && ls 2>/dev/null | xargs -I{} cksum {} 2>/dev/null | sed 's/\([0-9]\) \([a-zA-Z]\)/\1|\2/g' | sed 's/^/|/g' | sed 's/$/|/g' || echo "|No files found|")

          EOF
            done
          done

          cat <<EOF >> /tmp/RELEASE_NOTES
          ## What's Changed
          $(git log --format='- %s' v$PREVIOUS_RELEASE_VERSION..HEAD~1)
          
          **Full Changelog**: https://github.com/awslabs/aws-athena-query-federation/compare/v$PREVIOUS_RELEASE_VERSION..v$NEW_RELEASE_VERSION
          EOF
          # Create the draft github release
          echo "Creating release v$NEW_RELEASE_VERSION..."
          gh release create "v$NEW_RELEASE_VERSION" -d --latest \
            --target release_${NEW_RELEASE_VERSION} \
            -t "Release v$NEW_RELEASE_VERSION of Athena Query Federation" \
            --notes-file /tmp/RELEASE_NOTES
          
          # Wait for release to be fully created and verify it exists
          echo "Waiting for release to be fully created..."
          sleep 10
          
          # Verify the release exists and is accessible
          echo "Verifying release exists..."
          for i in {1..5}; do
            if gh release view "v$NEW_RELEASE_VERSION" >/dev/null 2>&1; then
              echo "Release v$NEW_RELEASE_VERSION confirmed to exist"
              break
            else
              echo "Release not yet accessible, waiting... ($i/5)"
              sleep 5
            fi
          done
          
          echo "=== Final artifact counts before upload ==="
          echo "Java 11 SDK jars: $(find /tmp/java11_sdk_jars -type f 2>/dev/null | wc -l)"
          echo "Java 11 connector jars: $(find /tmp/java11_connector_jars -type f 2>/dev/null | wc -l)"
          echo "Java 11 connector zips: $(find /tmp/java11_connector_zips -type f 2>/dev/null | wc -l)"
          echo "Java 17 SDK jars: $(find /tmp/java17_sdk_jars -type f 2>/dev/null | wc -l)"
          echo "Java 17 connector jars: $(find /tmp/java17_connector_jars -type f 2>/dev/null | wc -l)"
          echo "Java 17 connector zips: $(find /tmp/java17_connector_zips -type f 2>/dev/null | wc -l)"
          
          # Collect all files with proper error handling
          ALL_FILES=""
          for dir in /tmp/java11_sdk_jars /tmp/java11_connector_jars /tmp/java11_connector_zips /tmp/java17_sdk_jars /tmp/java17_connector_jars /tmp/java17_connector_zips; do
            if [ -d "$dir" ]; then
              FILES=$(find "$dir" -type f 2>/dev/null || true)
              if [ -n "$FILES" ]; then
                ALL_FILES="$ALL_FILES $FILES"
              fi
            fi
          done
          
          # Debug: Show what files we're trying to upload
          echo "=== Files to upload ==="
          echo "$ALL_FILES" | tr ' ' '\n' | head -10
          echo "Total files: $(echo $ALL_FILES | wc -w)"
          
          if [ -n "$ALL_FILES" ]; then
            # Get list of existing assets to avoid conflicts
            echo "Checking existing assets..."
            EXISTING_ASSETS=$(gh release view "v$NEW_RELEASE_VERSION" --json assets --jq '.assets[].name' 2>/dev/null || echo "")
            
            # Upload files one by one to handle conflicts better
            UPLOAD_SUCCESS=true
            UPLOADED_COUNT=0
            SKIPPED_COUNT=0
            
            for file in $ALL_FILES; do
              filename=$(basename "$file")
              
              # Check if asset already exists
              if echo "$EXISTING_ASSETS" | grep -q "^${filename}$"; then
                echo "Asset $filename already exists, attempting to replace..."
                # Try to upload with clobber for existing files
                if gh release upload "v$NEW_RELEASE_VERSION" "$file" --clobber 2>/dev/null; then
                  echo "✅ Replaced: $filename"
                  ((UPLOADED_COUNT++))
                else
                  echo "Failed to replace $filename, but it already exists - skipping"
                  ((SKIPPED_COUNT++))
                fi
              else
                echo "Uploading new asset: $filename"
                # Try to upload new file
                if gh release upload "v$NEW_RELEASE_VERSION" "$file" 2>/dev/null; then
                  echo "Uploaded: $filename"
                  ((UPLOADED_COUNT++))
                else
                  echo "❌ Failed to upload: $filename"
                  UPLOAD_SUCCESS=false
                fi
              fi
            done
            
            echo "=== Upload Summary ==="
            echo "Successfully uploaded/replaced: $UPLOADED_COUNT"
            echo "Skipped (already existed): $SKIPPED_COUNT"
            echo "Total files processed: $(echo $ALL_FILES | wc -w)"
            
            if [ "$UPLOAD_SUCCESS" = false ]; then
              echo "ERROR: Some uploads failed!"
              exit 1
            else
              echo "Upload process completed successfully!"
            fi
          else
            echo "ERROR: No files found to upload!"
            echo "Checking directory contents:"
            for dir in /tmp/java11_sdk_jars /tmp/java11_connector_jars /tmp/java11_connector_zips /tmp/java17_sdk_jars /tmp/java17_connector_jars /tmp/java17_connector_zips; do
              echo "Directory $dir:"
              ls -la "$dir" 2>/dev/null || echo "  Directory does not exist"
            done
            exit 1
          fi
